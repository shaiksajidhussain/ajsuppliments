 <div className="bg-gray-50 rounded-lg p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-6">Select Ingredients:</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Protein Sources */}
              <div>
                <h3 className="text-md font-medium text-gray-800 mb-4">Protein Sources</h3>
                <div className="max-h-80 overflow-y-auto border border-gray-200 rounded-md p-4 bg-white">
                  {proteinSources.map((ingredient, index) => (
                    <div key={index} className="flex items-center mb-2">
                      <input
                        type="checkbox"
                        id={`protein-${index}`}
                        checked={selectedIngredients.protein.includes(ingredient)}
                        onChange={(e) => handleIngredientChange('protein', ingredient, e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor={`protein-${index}`} className="ml-2 text-sm text-gray-700">
                        {ingredient}
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              {/* Medium Sources */}
              <div>
                <h3 className="text-md font-medium text-gray-800 mb-4">Medium Sources</h3>
                <div className="max-h-80 overflow-y-auto border border-gray-200 rounded-md p-4 bg-white">
                  {mediumSources.map((ingredient, index) => (
                    <div key={index} className="flex items-center mb-2">
                      <input
                        type="checkbox"
                        id={`medium-${index}`}
                        checked={selectedIngredients.medium.includes(ingredient)}
                        onChange={(e) => handleIngredientChange('medium', ingredient, e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor={`medium-${index}`} className="ml-2 text-sm text-gray-700">
                        {ingredient}
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              {/* Energy Sources */}
              <div>
                <h3 className="text-md font-medium text-gray-800 mb-4">Energy Sources</h3>
                <div className="max-h-80 overflow-y-auto border border-gray-200 rounded-md p-4 bg-white">
                  {energySources.map((ingredient, index) => (
                    <div key={index} className="flex items-center mb-2">
                      <input
                        type="checkbox"
                        id={`energy-${index}`}
                        checked={selectedIngredients.energy.includes(ingredient)}
                        onChange={(e) => handleIngredientChange('energy', ingredient, e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor={`energy-${index}`} className="ml-2 text-sm text-gray-700">
                        {ingredient}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Action Button */}
          <div className="flex justify-center">
            <button
              type="submit"
              disabled={isLoading}
              className={`px-8 py-3 rounded-lg font-medium text-white transition duration-150 ease-in-out ${
                isLoading
                  ? 'bg-gray-400 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'
              }`}
            >
              {isLoading ? (
                <div className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Processing...
                </div>
              ) : (
                'Calculate'
              )}
            </button>
          </div>

          {/* Clear Data Button */}
          <div className="flex justify-center">
            <button
              type="button"
              onClick={handleLogout}
              className="text-sm text-gray-500 hover:text-gray-700 transition duration-150 ease-in-out"
            >
              Clear Form Data
            </button>
          </div>