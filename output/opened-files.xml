<Opened Files>
<File Name>
src/Components/Login/OurSoftware.jsx
</File Name>
<File Content>
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const OurSoftware = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    feedBatchWeight: '100',
    species: '',
    subspecies: '',
    animalType: 'broiler',
    phase: 'finisher',
    crudeProtein: '',
    energy: '',
    includePremix: true
  });
  const [error, setError] = useState('');

  // Pre-populate species from localStorage
  useEffect(() => {
    const selectedSpecies = localStorage.getItem('selectedSpecies');
    if (selectedSpecies) {
      setFormData(prev => ({
        ...prev,
        species: selectedSpecies
      }));
    }
  }, []);

  // Species and subspecies options
  const speciesOptions = [
    { value: 'poultry', label: 'Poultry' },
    { value: 'cattle', label: 'Cattle' },
    { value: 'buffalo', label: 'Buffalo' },
    { value: 'sheep', label: 'Sheep' },
    { value: 'swine', label: 'Swine' },
    { value: 'goat', label: 'Goat' }
  ];

  const subspeciesOptions = {
    poultry: [
      { value: 'chicken', label: 'Chicken' },
      { value: 'quails', label: 'Quails' },
      { value: 'turkey', label: 'Turkey' },
      { value: 'duck', label: 'Duck' }
    ],
    cattle: [
      { value: 'dairy', label: 'Dairy' },
      { value: 'beef', label: 'Beef' }
    ],
    buffalo: [
      { value: 'dairy_buffalo', label: 'Dairy Buffalo' },
      { value: 'meat_buffalo', label: 'Meat Buffalo' }
    ],
    sheep: [
      { value: 'wool', label: 'Wool' },
      { value: 'meat', label: 'Meat' }
    ],
    swine: [
      { value: 'piglet', label: 'Piglet' },
      { value: 'grower', label: 'Grower' },
      { value: 'finisher', label: 'Finisher' }
    ],
    goat: [
      { value: 'dairy_goat', label: 'Dairy Goat' },
      { value: 'meat_goat', label: 'Meat Goat' }
    ]
  };

  // Animal Type options based on subspecies and species
  const getAnimalTypeOptions = (subspecies, species) => {
    // Special handling for Swine
    if (species === 'swine') {
      return [
        { value: 'marketing_pigs', label: 'Marketing pigs' },
        { value: 'no_marketing_pigs', label: 'No Marketing pigs' }
      ];
    }

    // Default handling for other species
    switch (subspecies) {
      case 'quails':
        return [
          { value: 'broiler', label: 'Broilers' },
          { value: 'breeder', label: 'Breeders' }
        ];
      case 'turkey':
      case 'duck':
        return [
          { value: 'layer', label: 'Layers' }
        ];
      case 'chicken':
      default:
        return [
          { value: 'broiler', label: 'Broilers' },
          { value: 'layer', label: 'Layers' },
          { value: 'broilerbreeder', label: 'Broiler Breeders' },
          { value: 'layerbreeder', label: 'Layer Breeders' }
        ];
    }
  };

  // Phase options based on animal type, subspecies, and species
  const getPhaseOptions = (animalType, subspecies, species) => {
    // Special handling for Quails
    if (subspecies === 'quails') {
      switch (animalType) {
        case 'broiler':
          return [
            { value: 'starter', label: 'Starter' },
            { value: 'finisher', label: 'Finisher' }
          ];
        case 'breeder':
          return [
            { value: 'broiler_breeders', label: 'Broiler Breeders' },
            { value: 'layer_breeders', label: 'Layer Breeders' }
          ];
        default:
          return [
            { value: 'starter', label: 'Starter' },
            { value: 'finisher', label: 'Finisher' }
          ];
      }
    }

    // Special handling for Turkey
    if (subspecies === 'turkey') {
      switch (animalType) {
        case 'layer':
          return [
            { value: '0_6wks', label: '0-6wks' },
            { value: '6_12wks', label: '6-12 wks' },
            { value: '12_18wks', label: '12-18 wks' },
            { value: '18wk_pre_laying', label: '18wk pre-laying' },
            { value: 'layers_breeder', label: 'Layers / Breeder' }
          ];
        default:
          return [
            { value: '0_6wks', label: '0-6wks' },
            { value: '6_12wks', label: '6-12 wks' },
            { value: '12_18wks', label: '12-18 wks' },
            { value: '18wk_pre_laying', label: '18wk pre-laying' },
            { value: 'breeder', label: 'Breeder' }
          ];
      }
    }

    // Special handling for Duck
    if (subspecies === 'duck') {
      switch (animalType) {
        case 'layer':
          return [
            { value: 'starter_0_8wks', label: 'Starter (0-8 wks)' },
            { value: 'grower_8_16wks', label: 'Grower (8 to 16 wks)' },
            { value: 'rearer_16_20wks', label: 'Rearer (16-20 wks)' },
            { value: 'layer_20wks', label: 'Layer (>20wks)' }
          ];
        default:
          return [
            { value: 'starter_0_8wks', label: 'Starter (0-8 wks)' },
            { value: 'grower_8_16wks', label: 'Grower (8 to 16 wks)' },
            { value: 'rearer_16_20wks', label: 'Rearer (16-20 wks)' },
            { value: 'layer_20wks', label: 'Layer (>20wks)' }
          ];
      }
    }

    // Special handling for Cattle (using species directly)
    if (species === 'cattle') {
      return [
        { value: 'calf_starter', label: 'Calf starter meal' },
        { value: 'type1_high_yielding', label: 'Type 1 (High yielding)' },
        { value: 'type2_medium_yielding', label: 'Type 2 (medium yielding)' },
        { value: 'type3', label: 'Type 3' },
        { value: 'gestating', label: 'Gestating' },
        { value: 'lactating', label: 'Lactating' }
      ];
    }

    // Special handling for Buffalo (using species directly)
    if (species === 'buffalo') {
      return [
        { value: 'calf_starter', label: 'Calf starter meal' },
        { value: 'calf_growth', label: 'Calf growth meal' },
        { value: 'type1_high_yielding', label: 'Type 1 (High yielding)' },
        { value: 'type2_medium_yielding', label: 'Type 2 (medium yielding)' },
        { value: 'type3', label: 'Type 3' },
        { value: 'gestating', label: 'Gestating' },
        { value: 'lactating', label: 'Lactating' }
      ];
    }

    // Special handling for Sheep (using species directly)
    if (species === 'sheep') {
      return [
        { value: 'growing_lambs', label: 'Growing lambs' },
        { value: 'pregnant', label: 'Pregnant' },
        { value: 'lactating', label: 'Lactating' },
        { value: 'breeding_male', label: 'Breeding male' }
      ];
    }

    // Special handling for Goat (using species directly)
    if (species === 'goat') {
      return [
        { value: 'growing_lambs', label: 'Growing lambs' },
        { value: 'pregnant', label: 'Pregnant' },
        { value: 'lactating', label: 'Lactating' },
        { value: 'breeding_male', label: 'Breeding male' }
      ];
    }

    // Special handling for Swine (using species and animal type)
    if (species === 'swine') {
      if (animalType === 'marketing_pigs') {
        return [
          { value: 'starter_creep', label: 'Starter/Creep feed' },
          { value: 'growers_feed', label: 'Growers feed' },
          { value: 'finishing_feed', label: 'Finishing feed' }
        ];
      } else if (animalType === 'no_marketing_pigs') {
        return [
          { value: 'gestating_pigs', label: 'Gestating pigs' },
          { value: 'nursing_sow', label: 'Nursing sow' },
          { value: 'breeding_male', label: 'Breeding male' }
        ];
      } else {
        // Default case - show all options
        return [
          { value: 'starter_creep', label: 'Starter/Creep feed' },
          { value: 'growers_feed', label: 'Growers feed' },
          { value: 'finishing_feed', label: 'Finishing feed' },
          { value: 'gestating_pigs', label: 'Gestating pigs' },
          { value: 'nursing_sow', label: 'Nursing sow' },
          { value: 'breeding_male', label: 'Breeding male' }
        ];
      }
    }

    // Default handling for Chicken and other subspecies
    switch (animalType) {
      case 'broiler':
        return [
          { value: 'starter', label: 'Starter' },
          { value: 'grower', label: 'Grower' },
          { value: 'finisher', label: 'Finisher' }
        ];
      case 'layer':
        return [
          { value: 'chick', label: 'Chick' },
          { value: 'grower', label: 'Grower' },
          { value: 'pre_layer', label: 'Pre layer' },
          { value: 'layer', label: 'Layer ' },
          { value: 'male', label: 'Male ' }
        ];
      case 'broilerbreeder':
        return [
          { value: 'chick', label: 'Chick' },
          { value: 'grower', label: 'Grower' },
          { value: 'pre_layer', label: 'Pre layer' },
          { value: 'layer', label: 'Layer' },
          { value: 'male', label: 'Male' }
        ];
      case 'layerbreeder':
        return [
          { value: 'chick', label: 'Chick' },
          { value: 'grower', label: 'Grower' },
          { value: 'pre_layer', label: 'Pre layer' },
          { value: 'layer', label: 'Layer ' },
          { value: 'male', label: 'Male ' }
        ];
      default:
        return [
          { value: 'starter', label: 'Starter' },
          { value: 'grower', label: 'Grower' },
          { value: 'finisher', label: 'Finisher' }
        ];
    }
  };



  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (type === 'checkbox') {
      setFormData(prev => ({
        ...prev,
        [name]: checked
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }

    // Clear subspecies and animal type when species changes
    if (name === 'species') {
      if (value === 'poultry') {
        // For poultry, reset subspecies and animal type
        setFormData(prev => ({
          ...prev,
          subspecies: '',
          animalType: 'broiler'
        }));
      } else if (value === 'swine') {
        // For swine, reset subspecies and set default animal type
        const animalTypeOptions = getAnimalTypeOptions('', value);
        setFormData(prev => ({
          ...prev,
          subspecies: '',
          animalType: animalTypeOptions[0]?.value || 'marketing_pigs'
        }));
      } else {
        // For other species, clear subspecies and animal type
        setFormData(prev => ({
          ...prev,
          subspecies: '',
          animalType: 'broiler'
        }));
      }
    }

    // Reset animal type when subspecies changes
    if (name === 'subspecies') {
      const animalTypeOptions = getAnimalTypeOptions(value, formData.species);
      setFormData(prev => ({
        ...prev,
        animalType: animalTypeOptions[0]?.value || 'broiler',
        phase: getPhaseOptions(animalTypeOptions[0]?.value || 'broiler', value, formData.species)[0]?.value || 'starter'
      }));
    }

    // Reset phase when animal type changes
    if (name === 'animalType') {
      const phaseOptions = getPhaseOptions(value, formData.subspecies, formData.species);
      setFormData(prev => ({
        ...prev,
        phase: phaseOptions[0]?.value || 'starter'
      }));
    }

    // Clear error when user starts typing
    if (error) setError('');
  };


  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    // Validation
    if (!formData.feedBatchWeight || !formData.species) {
      setError('Please fill in all required fields');
      return;
    }

    // Only require subspecies for poultry
    if (formData.species === 'poultry' && !formData.subspecies) {
      setError('Please select a subspecies for poultry');
      return;
    }

   
  };


  return (
    <div 
      className="min-h-screen relative"
      style={{
        backgroundImage: 'url(https://images.stockcake.com/public/1/4/d/14d133a4-16ec-46bf-b384-da364125b7ff_large/sunset-farm-hen-stockcake.jpg)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat'
      }}
    >
      {/* Dark overlay */}
      <div className="absolute inset-0 bg-black/75"></div>
      
      {/* Content */}
      <div className="relative z-10">
        {/* Header */}
        <div className=" backdrop-blur-sm border-b border-gray-200 px-6 py-4" style={{padding: '32px 16px'}}>
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-white">Feed Formulation</h1>
            <div className="flex items-center space-x-4 gap-7">
              <button 
                onClick={() => navigate('/species')}
                className=" bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200"
                style={{padding:'4px'}}
              >
                ← Back to Species
              </button>
              <span className="text-white text-sm">
                Welcome, {localStorage.getItem('userEmail') || 'User'}
              </span>
              <button 
                onClick={() => {
                  localStorage.removeItem('isLoggedIn');
                  localStorage.removeItem('userEmail');
                  localStorage.removeItem('loginTime');
                  localStorage.removeItem('selectedSpecies');
                  navigate('/login');
                }}
                className=" bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200"
                style={{padding:'4px'}}
              >
                Logout
              </button>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-6 py-8" style={{padding: '32px 16px'}} >
          <form onSubmit={handleSubmit} className="space-y-8">
            {/* General Formulation Parameters */}
            <div className="bg-white/95 backdrop-blur-sm rounded-lg p-6 shadow-xl border border-white/20">
            <h2 className="text-5xl font-semibold text-gray-900" style={{padding: '10px 16px'}}>General Formulation Parameters</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 " style={{padding: '32px 16px'}}>
              {/* Feed Batch Weight */}
              <div>
                <label htmlFor="feedBatchWeight" className="block text-sm font-medium text-gray-700 mb-2">
                  Feed Batch Weight (kg):
                </label>
                <input
                  type="number"
                  id="feedBatchWeight"
                  name="feedBatchWeight"
                  value={formData.feedBatchWeight}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                />
              </div>

              {/* Species */}
              <div>
                <label htmlFor="species" className="block text-sm font-medium text-gray-700 mb-2">
                  Species:
                </label>
                <select
                  id="species"
                  name="species"
                  value={formData.species}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                >
                  <option value="">Select Species</option>
                  {speciesOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Subspecies - Only show for Poultry */}
              {formData.species === 'poultry' && (
                <div>
                  <label htmlFor="subspecies" className="block text-sm font-medium text-gray-700 mb-2">
                    Subspecies:
                  </label>
                  <select
                    id="subspecies"
                    name="subspecies"
                    value={formData.subspecies}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                  >
                    {subspeciesOptions.poultry.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {/* Animal Type - Show for Poultry and Swine */}
              {(formData.species === 'poultry' || formData.species === 'swine') && (
                <div>
                  <label htmlFor="animalType" className="block text-sm font-medium text-gray-700 mb-2">
                    Animal Type:
                  </label>
                  <select
                    id="animalType"
                    name="animalType"
                    value={formData.animalType}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                  >
                  {getAnimalTypeOptions(formData.subspecies, formData.species).map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                  </select>
                </div>
              )}

              {/* Phase */}
              <div>
                <label htmlFor="phase" className="block text-sm font-medium text-gray-700 mb-2">
                  Phase:
                </label>
                <select
                  id="phase"
                  name="phase"
                  value={formData.phase}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                >
                  {getPhaseOptions(formData.animalType, formData.subspecies, formData.species).map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Crude Protein */}
              <div>
                <label htmlFor="crudeProtein" className="block text-sm font-medium text-gray-700 mb-2">
                  Crude Protein (%) [optional]:
                </label>
                <input
                  type="number"
                  id="crudeProtein"
                  name="crudeProtein"
                  value={formData.crudeProtein}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                  placeholder="Enter percentage"
                />
              </div>

              {/* Energy */}
              {/* <div>
                <label htmlFor="energy" className="block text-sm font-medium text-gray-700 mb-2">
                  Energy (kcal/kg) [optional]:
                </label>
                <input
                  type="number"
                  id="energy"
                  name="energy"
                  value={formData.energy}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter kcal/kg"
                />
              </div> */}

              {/* Include Premix */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="includePremix"
                  name="includePremix"
                  checked={formData.includePremix}
                  onChange={handleInputChange}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="includePremix" className="ml-2 block text-sm text-gray-700">
                  Include Premix:
                </label>
              </div>
            </div>

            {error && (
              <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-md">
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}
          </div>

            {/* Select Ingredients Section */}
           
          </form>
        </div>
      </div>
    </div>
  );
};

export default OurSoftware;

</File Content>
</Opened Files>
<Opened Files>
<File Name>
src/Components/Login/SpeciesSelection.jsx
</File Name>
<File Content>
import React from 'react';
import { useNavigate } from 'react-router-dom';
import '../../index.css';

const SpeciesSelection = () => {
  const navigate = useNavigate();

  const speciesData = [
    {
      id: 'poultry',
      name: 'Poultry',
      description: 'Chicken, Turkey, Duck, Quails',
      image: 'https://media.istockphoto.com/id/1297318963/photo/silhouette-of-a-rooster-crow-in-the-morning-sunrise-background.jpg?s=612x612&w=0&k=20&c=EFp3wMROww5QjPhzuhH6-YTJRfmgeYh8SSa-7fMKTo0=',
      gradient: 'from-yellow-400 to-orange-500',
      hoverGradient: 'from-yellow-500 to-orange-600'
    },
    {
      id: 'cattle',
      name: 'Cattle',
      description: 'Dairy and Beef Cattle',
      image: 'https://static.vecteezy.com/system/resources/thumbnails/044/542/774/small_2x/cows-in-the-pasture-photo.jpeg',
      gradient: 'from-brown-400 to-amber-600',
      hoverGradient: 'from-brown-500 to-amber-700'
    },
    {
      id: 'buffalo',
      name: 'Buffalo',
      description: 'Dairy and Meat Buffalo',
      image: 'https://images.stockcake.com/public/1/2/d/12df69bb-748c-4f9e-b559-e65792ab4f5b_large/buffalo-at-sunset-stockcake.jpg',
      gradient: 'from-gray-500 to-gray-700',
      hoverGradient: 'from-gray-600 to-gray-800'
    },
    {
      id: 'sheep',
      name: 'Sheep',
      description: 'Wool and Meat Sheep',
      image: 'https://media.istockphoto.com/id/1366782202/photo/lamb-running-on-the-field-at-sunset.jpg?s=612x612&w=0&k=20&c=wZKync0nt9Q0TJ9ELxIQgZ_3qsCVDx4OSjwvp1yQrug=',
      gradient: 'from-white to-gray-400',
      hoverGradient: 'from-gray-100 to-gray-500'
    },
    {
      id: 'swine',
      name: 'Swine',
      description: 'Pigs and Piglets',
      image: 'https://media.istockphoto.com/id/153560796/photo/small-pig.jpg?s=612x612&w=0&k=20&c=sTm01xCQn20jJJqBoPXL3zQACIrM1zN9IOzNR9ta-Tk=',
      gradient: 'from-pink-400 to-rose-600',
      hoverGradient: 'from-pink-500 to-rose-700'
    },
    {
      id: 'goat',
      name: 'Goat',
      description: 'Dairy and Meat Goats',
      image: 'https://images.stockcake.com/public/4/3/b/43b07e85-2543-4186-83c2-05d9579b2267_large/goat-at-sunset-stockcake.jpg',
      gradient: 'from-green-400 to-emerald-600',
      hoverGradient: 'from-green-500 to-emerald-700'
    }
  ];

  const handleSpeciesClick = (speciesId) => {
    // Store selected species in localStorage
    localStorage.setItem('selectedSpecies', speciesId);
    // Navigate to specific species page
    navigate(`/${speciesId}`);
  };

  const handleLogout = () => {
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('loginTime');
    localStorage.removeItem('selectedSpecies');
    navigate('/login');
  };

  return (
    <div 
      className="min-h-screen relative"
      style={{
        backgroundImage: 'url(https://images.stockcake.com/public/1/4/d/14d133a4-16ec-46bf-b384-da364125b7ff_large/sunset-farm-hen-stockcake.jpg)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat'
      }}
    >
      {/* Dark overlay */}
      <div className="absolute inset-0 bg-black/75"></div>
      
      {/* Content */}
      <div className="relative z-10 ">
        {/* Header */}
        <div className="backdrop-blur-sm border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-between gap-7">
            <h1 className="text-4xl font-bold text-white " style={{padding:'16px'}}>Select Animal Species</h1>
            <div className="flex items-center space-x-4 gap-7">
              <span className="text-white text-sm">
                Welcome, {localStorage.getItem('userEmail') || 'User'}
              </span>
              <button 
                onClick={handleLogout}
                className=" bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200"
                style={{padding:'10px',marginRight:'10px'}}
              >
                Logout
              </button>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="max-w-7xl mx-auto px-6 py-8" style={{padding:'16px'}}>
          <div className="text-center mb-12 " style={{padding:'10px'}}>
            <h2 className="text-4xl font-bold text-white mb-4 text-center">
              Choose Your Animal Species
            </h2>
            <p className="text-xl text-gray-200">
              Select the type of animal you want to formulate feed for
            </p>
          </div>

          {/* Species Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 " style={{padding:'10px'}}>
            {speciesData.map((species) => (
              <div
                key={species.id}
                onClick={() => handleSpeciesClick(species.id)}
                className="group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:-translate-y-2"
              >
                <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 hover:bg-white/20 transition-all duration-300 h-full">
                  {/* Image Container */}
                  <div className="relative mb-6 overflow-hidden rounded-xl">
                    <img
                      src={species.image}
                      alt={species.name}
                      className="w-full h-48 object-cover transition-transform duration-300 group-hover:scale-110"
                      onError={(e) => {
                        // Fallback to a placeholder if image fails to load
                        e.target.src = `https://via.placeholder.com/400x300/4F46E5/FFFFFF?text=${species.name}`;
                      }}
                    />
                    <div className={`absolute inset-0 bg-gradient-to-t ${species.gradient} opacity-0 group-hover:opacity-20 transition-opacity duration-300`}></div>
                  </div>

                  {/* Content */}
                  <div className="text-center">
                    <h3 className="text-2xl font-bold text-white mb-2 group-hover:text-yellow-300 transition-colors duration-300">
                      {species.name}
                    </h3>
                    <p className="text-gray-300 text-sm mb-4">
                      {species.description}
                    </p>
                    
                    {/* Click Indicator */}
                    {/* <div className="inline-flex items-center bg-white/20 rounded-full text-white text-sm font-medium group-hover:bg-white/30 transition-all duration-300"
                    style={{padding:'4px',marginTop:'10px'}}
                    >
                      <span>Click to Continue</span>
                      <svg 
                        className="ml-2 w-4 h-4 transform group-hover:translate-x-1 transition-transform duration-300" 
                        fill="none" 
                        stroke="currentColor" 
                        viewBox="0 0 24 24"
                      >
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </div> */}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Footer Info */}
          {/* <div className="text-center mt-16 flex justify-center items-center">
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20 max-w-4xl mx-auto">
              <h3 className="text-2xl font-bold text-white mb-4">
                Advanced Feed Formulation
              </h3>
              <p className="text-gray-200 text-lg leading-relaxed">
                Our intelligent feed formulation software provides precise nutritional recommendations 
                tailored to each species' specific requirements. Select your animal type above to 
                begin creating optimized feed formulations.
              </p>
            </div>
          </div> */}
        </div>
      </div>
    </div>
  );
};

export default SpeciesSelection;

</File Content>
</Opened Files>
<Opened Files>
<File Name>
src/App.jsx
</File Name>
<File Content>
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './Components/Navbar/Navbar';
import './App.css';
import Hero from './Components/Hero Section/Hero';
import About from './Components/About/About';
import { ThemeProvider } from './contexts/ThemeContext';
import OurExpertise from './Components/Our Expertise/OurExpertise';
import Ourproducts from './Components/Our Products/Ourproducts';
import Ourceritifications from './Components/Our Certifications/Ourceritifications';
import Oursoftwareadnwhoweare from './Components/Our Software/Oursoftwareadnwhoweare';
import Contact from './Components/Contact Form/Contact';
import OurSoftware from './Components/Login/OurSoftware';
import Login from './Components/Login/Login';
import SpeciesSelection from './Components/Login/SpeciesSelection';
import ProtectedRoute from './Components/ProtectedRoute';
import Poultry from './Components/Species/Poultry';
import Cattle from './Components/Species/Cattle';
import Buffalo from './Components/Species/Buffalo';
import Sheep from './Components/Species/Sheep';
import Swine from './Components/Species/Swine';
import Goat from './Components/Species/Goat';

const App = () => {
  const handleLogout = () => {
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('loginTime');
    window.location.href = '/login';
  };


  return (
    <ThemeProvider>
      <Router>
        <Routes>
          {/* Redirect root to home */}
          <Route 
            path="/" 
            element={<Navigate to="/home" replace />}
          />
          
          {/* Login Route */}
          <Route 
            path="/login" 
            element={<Login />}
          />
          
          {/* Species Selection Route - Protected */}
          <Route 
            path="/species" 
            element={
              <ProtectedRoute>
                <SpeciesSelection />
              </ProtectedRoute>
            }
          />
          
          {/* Species-specific Routes - Protected */}
          <Route 
            path="/poultry" 
            element={
              <ProtectedRoute>
                <Poultry />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/cattle" 
            element={
              <ProtectedRoute>
                <Cattle />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/buffalo" 
            element={
              <ProtectedRoute>
                <Buffalo />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/sheep" 
            element={
              <ProtectedRoute>
                <Sheep />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/swine" 
            element={
              <ProtectedRoute>
                <Swine />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/goat" 
            element={
              <ProtectedRoute>
                <Goat />
              </ProtectedRoute>
            }
          />
          
          {/* OurSoftware Route - Protected (Legacy) */}
          <Route 
            path="/oursoftware" 
            element={
              <ProtectedRoute>
                <OurSoftware />
              </ProtectedRoute>
            }
          />
          
          {/* Main App Route */}
          <Route 
            path="/home" 
            element={
         
                <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 transition-all duration-500">
                  <Navbar onLogout={handleLogout} />
                  
                  {/* Main content with sections for smooth scrolling */}
                  <main>
                    {/* Hero Section */}
                    <section id="hero" className="h-screen">
                      <Hero/>
                    </section>

                    {/* About Section */}
                    <section id="about">
                      <About />
                    </section>

                    {/* Expertise Section */}
                    <section id="expertise">
                      <OurExpertise/>
                    </section>

                    {/* Products Section */}
                    <section id="products">
                      <Ourproducts/>
                    </section>

                    {/* Certifications Section */}
                    <section id="certifications">
                      <Ourceritifications/>
                    </section>

                    {/* Software Section */}
                    <section id="software">
                      <Oursoftwareadnwhoweare/>
                    </section>

                    {/* Contact Section */}
                    <section id="contact">
                      <Contact/>
                    </section>
                  </main>
                </div>
              
            } 
          />
          
          {/* Catch-all route - redirect to home */}
          <Route 
            path="*" 
            element={<Navigate to="/home" replace />}
          />
        </Routes>
      </Router>
    </ThemeProvider>
  );
};

export default App;
</File Content>
</Opened Files>
<Opened Files>
<File Name>
src/Components/Species/Poultry.jsx
</File Name>
<File Content>
import React from 'react';
import SharedSpeciesForm from './SharedSpeciesForm';
import { subspeciesOptions, getAnimalTypeOptions, getPhaseOptions } from './speciesData';

const Poultry = () => {
  return (
    <SharedSpeciesForm
      speciesType="poultry"
      speciesName="Poultry"
      subspeciesOptions={subspeciesOptions.poultry}
      getAnimalTypeOptions={getAnimalTypeOptions}
      getPhaseOptions={getPhaseOptions}
      backgroundImage="https://images.stockcake.com/public/1/4/d/14d133a4-16ec-46bf-b384-da364125b7ff_large/sunset-farm-hen-stockcake.jpg"
    />
  );
};

export default Poultry;

</File Content>
</Opened Files>
<Opened Files>
<File Name>
src/Components/Navbar/Navbar.jsx
</File Name>
<File Content>
import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { useTheme } from '../../contexts/ThemeContext';

// Register GSAP plugins
gsap.registerPlugin(ScrollTrigger);

const Navbar = ({ onLogout }) => {
  const { isDarkMode, toggleTheme } = useTheme();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('hero');
  const [username, setUsername] = useState('');
  const navbarRef = useRef(null);
  const logoRef = useRef(null);
  const navLinksRef = useRef([]);
  const themeToggleRef = useRef(null);

  // Get username from localStorage
  useEffect(() => {
    const storedUsername = localStorage.getItem('userEmail');
    if (storedUsername) {
      setUsername(storedUsername);
    }
  }, []);

  // Theme toggle handler is now from context

  // Initial GSAP animations (only run once)
  useEffect(() => {
    const navbar = navbarRef.current;
    const logo = logoRef.current;
    const navLinks = navLinksRef.current;
    const themeToggle = themeToggleRef.current;

    // Initial animation timeline
    const tl = gsap.timeline();
    
    // Animate navbar entrance
    tl.fromTo(navbar, 
      { y: -100, opacity: 0 },
      { y: 0, opacity: 1, duration: 1, ease: "power3.out" }
    )
    // Animate logo
    .fromTo(logo,
      { scale: 0, rotation: -180 },
      { scale: 1, rotation: 0, duration: 0.8, ease: "back.out(1.7)" },
      "-=0.5"
    )
    // Animate navigation links
    .fromTo(navLinks,
      { y: 50, opacity: 0 },
      { y: 0, opacity: 1, duration: 0.6, stagger: 0.1, ease: "power2.out" },
      "-=0.3"
    )
    // Animate theme toggle
    .fromTo(themeToggle,
      { scale: 0, rotation: 180 },
      { scale: 1, rotation: 0, duration: 0.5, ease: "back.out(1.7)" },
      "-=0.2"
    );
  }, []); // Empty dependency array - only run once

  // Scroll-triggered animations (separate effect)
  useEffect(() => {
    const navbar = navbarRef.current;
    
    // Scroll-triggered animation
    ScrollTrigger.create({
      trigger: navbar,
      start: "top top",
      end: "bottom top",
      onEnter: () => {
        gsap.to(navbar, { 
          backgroundColor: isDarkMode ? "rgba(26, 32, 44, 0.95)" : "rgba(255, 255, 255, 0.95)",
          backdropFilter: "blur(25px)",
          WebkitBackdropFilter: "blur(25px)",
          duration: 0.3
        });
      },
      onLeaveBack: () => {
        gsap.to(navbar, { 
          backgroundColor: isDarkMode ? "rgba(26, 32, 44, 0.8)" : "rgba(255, 255, 255, 0.8)",
          backdropFilter: "blur(20px)",
          WebkitBackdropFilter: "blur(20px)",
          duration: 0.3
        });
      }
    });

    return () => {
      ScrollTrigger.getAll().forEach(trigger => trigger.kill());
    };
  }, [isDarkMode]); // Only re-run when isDarkMode changes

  // Scroll spy to detect active section
  useEffect(() => {
    const sections = ['hero', 'about', 'expertise', 'products', 'certifications',  'contact'];
    
    const handleScroll = () => {
      const scrollPosition = window.scrollY + 100; // Offset for navbar height
      
      for (let i = sections.length - 1; i >= 0; i--) {
        const section = document.getElementById(sections[i]);
        if (section) {
          const sectionTop = section.offsetTop;
          const sectionHeight = section.offsetHeight;
          
          if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
            setActiveSection(sections[i]);
            break;
          }
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check initial position

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  // Hover animations for nav links
  const handleLinkHover = (index, isHovering) => {
    const link = navLinksRef.current[index];
    if (link) {
      gsap.to(link, {
        scale: isHovering ? 1.1 : 1,
        color: isHovering ? (isDarkMode ? "#60A5FA" : "#3B82F6") : (isDarkMode ? "#E5E7EB" : "#374151"),
        duration: 0.3,
        ease: "power2.out"
      });
    }
  };

  // Theme toggle animation
  const handleThemeToggle = () => {
    const toggle = themeToggleRef.current;
    gsap.to(toggle, {
      rotation: "+=180",
      scale: 0.8,
      duration: 0.2,
      yoyo: true,
      repeat: 1,
      ease: "power2.inOut",
      onComplete: () => {
        toggleTheme();
      }
    });
  };

  return (
    <nav 
      ref={navbarRef}
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 50,
        backgroundColor: isDarkMode 
          ? 'rgba(26, 32, 44, 0.8)' 
          : 'rgba(255, 255, 255, 0.8)',
        backdropFilter: 'blur(20px)',
        WebkitBackdropFilter: 'blur(20px)',
        borderBottom: isDarkMode 
          ? '1px solid rgba(255, 255, 255, 0.1)' 
          : '1px solid rgba(0, 0, 0, 0.1)',
        transition: 'all 0.3s ease'
      }}
    >
      {/* Bottom border line */}
      <div style={{
        height: '2px',
        width: '100%',
        background: isDarkMode 
          ? 'linear-gradient(90deg, transparent, rgba(96, 165, 250, 0.6), transparent)' 
          : 'linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.6), transparent)',
        marginTop: 'auto'
      }}></div>
      
      <div style={{ maxWidth: '1280px', margin: '0 auto', padding: '24px 32px' }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          {/* Logo Section */}
          <div 
            style={{ display: 'flex', alignItems: 'center', gap: '16px', cursor: 'pointer' }}
            onClick={() => {
              window.scrollTo({ top: 0, behavior: 'smooth' });
            }}
          >
            <div 
              ref={logoRef}
              style={{ position: 'relative' }}
            >
              <img 
                src="https://www.ajsupplements.com/static/logo.png" 
                alt="AJ Supplements Logo" 
                style={{
                  height: '56px',
                  width: '56px',
                  objectFit: 'contain',
                  transition: 'transform 0.3s ease'
                }}
                onError={(e) => {
                  // Fallback to text logo if image fails to load
                  e.target.style.display = 'none';
                  e.target.nextSibling.style.display = 'flex';
                }}
                onMouseEnter={(e) => e.target.style.transform = 'scale(1.1)'}
                onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
              />
              {/* Fallback text logo */}
              <div 
                style={{
                  display: 'none',
                  height: '56px',
                  width: '56px',
                  alignItems: 'center',
                  justifyContent: 'center',
                  borderRadius: '50%',
                  border: '2px solid',
                  borderColor: isDarkMode ? '#60A5FA' : '#3B82F6',
                  color: isDarkMode ? '#60A5FA' : '#3B82F6',
                  fontWeight: 'bold',
                  fontSize: '20px'
                }}
              >
                AJ
              </div>
            </div>
            <span style={{
              fontSize: '14px',
              fontWeight: '600',
              letterSpacing: '0.15em',
              textTransform: 'uppercase',
              color: isDarkMode ? '#D1D5DB' : '#6B7280'
            }}>
              SUPPLIMENTS
            </span>
          </div>

          {/* Navigation Links */}
          <div className="hidden md:flex items-center" style={{ gap: '3rem' }}>
            {[
              { name: 'ABOUT', id: 'about', type: 'scroll' },
              { name: 'EXPERTISE', id: 'expertise', type: 'scroll' },
              { name: 'PRODUCTS', id: 'products', type: 'scroll' },
              // { name: 'CERTIFICATIONS', id: 'certifications', type: 'scroll' },
              { name: 'SOFTWARE', id: 'oursoftware', type: 'route' },
              { name: 'CONTACT', id: 'contact', type: 'scroll' }
            ].map((link, index) => {
              const isActive = link.type === 'scroll' ? activeSection === link.id : window.location.pathname === `/${link.id}`;
              
              if (link.type === 'route') {
                // Special handling for software route - check authentication
                const handleSoftwareClick = (e) => {
                  e.preventDefault();
                  const isLoggedIn = localStorage.getItem('isLoggedIn');
                  if (isLoggedIn === 'true') {
                    // If logged in, go to species selection
                    window.location.href = '/species';
                  } else {
                    // If not logged in, go to login
                    window.location.href = '/login';
                  }
                };

                return (
                  <a
                    key={link.name}
                    ref={el => navLinksRef.current[index] = el}
                    href="#"
                    onClick={handleSoftwareClick}
                    style={{
                      fontWeight: 'bold',
                      fontSize: '14px',
                      letterSpacing: '0.2em',
                      padding: '8px 16px',
                      textDecoration: 'none',
                      transition: 'all 0.3s ease',
                      cursor: 'pointer',
                      color: isActive 
                        ? (isDarkMode ? '#60A5FA' : '#3B82F6')
                        : (isDarkMode ? '#E5E7EB' : '#374151'),
                      position: 'relative'
                    }}
                    className={`transition-all duration-300 ${
                      isDarkMode ? 'hover:text-blue-400' : 'hover:text-blue-600'
                    }`}
                    onMouseEnter={() => handleLinkHover(index, true)}
                    onMouseLeave={() => handleLinkHover(index, false)}
                  >
                    {link.name}
                    {/* Active indicator */}
                    {isActive && (
                      <div
                        style={{
                          position: 'absolute',
                          bottom: '-8px',
                          left: '50%',
                          transform: 'translateX(-50%)',
                          width: '6px',
                          height: '6px',
                          borderRadius: '50%',
                          backgroundColor: isDarkMode ? '#60A5FA' : '#3B82F6',
                          boxShadow: `0 0 10px ${isDarkMode ? '#60A5FA' : '#3B82F6'}`
                        }}
                      />
                    )}
                  </a>
                );
              }
              
              return (
                <a
                  key={link.name}
                  ref={el => navLinksRef.current[index] = el}
                  href={`#${link.id}`}
                  style={{
                    fontWeight: 'bold',
                    fontSize: '14px',
                    letterSpacing: '0.2em',
                    padding: '8px 16px',
                    textDecoration: 'none',
                    transition: 'all 0.3s ease',
                    cursor: 'pointer',
                    color: isActive 
                      ? (isDarkMode ? '#60A5FA' : '#3B82F6')
                      : (isDarkMode ? '#E5E7EB' : '#374151'),
                    position: 'relative'
                  }}
                  className={`transition-all duration-300 ${
                    isDarkMode ? 'hover:text-blue-400' : 'hover:text-blue-600'
                  }`}
                  onMouseEnter={() => handleLinkHover(index, true)}
                  onMouseLeave={() => handleLinkHover(index, false)}
                  onClick={(e) => {
                    e.preventDefault();
                    // Smooth scroll to section
                    const element = document.getElementById(link.id);
                    if (element) {
                      element.scrollIntoView({ behavior: 'smooth' });
                    }
                  }}
                >
                  {link.name}
                  {/* Active indicator */}
                  {isActive && (
                    <div
                      style={{
                        position: 'absolute',
                        bottom: '-8px',
                        left: '50%',
                        transform: 'translateX(-50%)',
                        width: '6px',
                        height: '6px',
                        borderRadius: '50%',
                        backgroundColor: isDarkMode ? '#60A5FA' : '#3B82F6',
                        boxShadow: `0 0 10px ${isDarkMode ? '#60A5FA' : '#3B82F6'}`
                      }}
                    />
                  )}
                </a>
              );
            })}
          </div>

          {/* User Info and Controls */}
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            {/* Username Display */}
            {/* {username && (
              <div style={{
                padding: '8px 16px',
                borderRadius: '20px',
                backgroundColor: isDarkMode ? '#374151' : '#E5E7EB',
                color: isDarkMode ? '#D1D5DB' : '#374151',
                fontSize: '14px',
                fontWeight: '500'
              }}>
                Welcome, {username}
              </div>
            )} */}

            {/* Theme Toggle */}
            <button
              ref={themeToggleRef}
              onClick={handleThemeToggle}
              style={{
                padding: '12px',
                borderRadius: '50%',
                border: 'none',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                backgroundColor: isDarkMode ? '#374151' : '#E5E7EB',
                color: isDarkMode ? '#FBBF24' : '#6B7280'
              }}
              onMouseEnter={(e) => {
                e.target.style.transform = 'scale(1.1)';
                e.target.style.backgroundColor = isDarkMode ? '#4B5563' : '#D1D5DB';
              }}
              onMouseLeave={(e) => {
                e.target.style.transform = 'scale(1)';
                e.target.style.backgroundColor = isDarkMode ? '#374151' : '#E5E7EB';
              }}
              aria-label="Toggle theme"
            >
              {isDarkMode ? (
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clipRule="evenodd" />
                </svg>
              ) : (
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
                </svg>
              )}
            </button>

            {/* Logout Button */}
            {username && (
              <button
                onClick={onLogout}
                style={{padding: '8px 16px'}}
                className={` rounded-lg font-medium text-sm transition-all duration-300 ${
                  isDarkMode 
                    ? 'bg-red-600 hover:bg-red-700 text-white' 
                    : 'bg-red-500 hover:bg-red-600 text-white'
                }`}
              >
                Logout
              </button>
            )}
          </div>

          {/* Mobile Menu Button */}
          <button
            className={`md:hidden p-3 rounded-lg transition-all duration-300 hover:scale-110 ${
              isDarkMode 
                ? 'bg-gray-700 hover:bg-gray-600 text-gray-200' 
                : 'bg-gray-200 hover:bg-gray-300 text-gray-600'
            }`}
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden mt-6 py-6 border-t border-gray-300 dark:border-gray-600">
            <div className="flex flex-col space-y-4">
              {[
                { name: 'ABOUT', id: 'about', type: 'scroll' },
                { name: 'EXPERTISE', id: 'expertise', type: 'scroll' },
                { name: 'PRODUCTS', id: 'products', type: 'scroll' },
                { name: 'CERTIFICATIONS', id: 'certifications', type: 'scroll' },
                { name: 'SOFTWARE', id: 'oursoftware', type: 'route' }, 
                { name: 'CONTACT', id: 'contact', type: 'scroll' }
              ].map((link) => {
                const isActive = link.type === 'scroll' ? activeSection === link.id : window.location.pathname === `/${link.id}`;
                
                if (link.type === 'route') {
                  // Special handling for software route - check authentication
                  const handleMobileSoftwareClick = (e) => {
                    e.preventDefault();
                    setIsMenuOpen(false);
                    const isLoggedIn = localStorage.getItem('isLoggedIn');
                    if (isLoggedIn === 'true') {
                      // If logged in, go to species selection
                      window.location.href = '/species';
                    } else {
                      // If not logged in, go to login
                      window.location.href = '/login';
                    }
                  };

                  return (
                    <a
                      key={link.name}
                      href="#"
                      onClick={handleMobileSoftwareClick}
                      className={`block py-3 font-bold text-sm tracking-[0.2em] uppercase transition-all duration-300 hover:scale-105 relative ${
                        isActive
                          ? (isDarkMode ? 'text-blue-400' : 'text-blue-600')
                          : (isDarkMode ? 'text-gray-200 hover:text-blue-400' : 'text-gray-700 hover:text-blue-600')
                      }`}
                      style={{
                        color: isActive 
                          ? (isDarkMode ? '#60A5FA' : '#3B82F6')
                          : undefined
                      }}
                    >
                      {link.name}
                      {/* Active indicator for mobile */}
                      {isActive && (
                        <div
                          style={{
                            position: 'absolute',
                            left: '-16px',
                            top: '50%',
                            transform: 'translateY(-50%)',
                            width: '4px',
                            height: '20px',
                            borderRadius: '2px',
                            backgroundColor: isDarkMode ? '#60A5FA' : '#3B82F6'
                          }}
                        />
                      )}
                    </a>
                  );
                }
                
                return (
                  <a
                    key={link.name}
                    href={`#${link.id}`}
                    className={`block py-3 font-bold text-sm tracking-[0.2em] uppercase transition-all duration-300 hover:scale-105 relative ${
                      isActive
                        ? (isDarkMode ? 'text-blue-400' : 'text-blue-600')
                        : (isDarkMode ? 'text-gray-200 hover:text-blue-400' : 'text-gray-700 hover:text-blue-600')
                    }`}
                    onClick={() => setIsMenuOpen(false)}
                    style={{
                      color: isActive 
                        ? (isDarkMode ? '#60A5FA' : '#3B82F6')
                        : undefined
                    }}
                  >
                    {link.name}
                    {/* Active indicator for mobile */}
                    {isActive && (
                      <div
                        style={{
                          position: 'absolute',
                          left: '-16px',
                          top: '50%',
                          transform: 'translateY(-50%)',
                          width: '4px',
                          height: '20px',
                          borderRadius: '2px',
                          backgroundColor: isDarkMode ? '#60A5FA' : '#3B82F6'
                        }}
                      />
                    )}
                  </a>
                );
              })}
              
              {/* Mobile Logout Button */}
              <div className="pt-4 border-t border-gray-300 dark:border-gray-600">
                <button
                  onClick={() => {
                    onLogout();
                    setIsMenuOpen(false);
                  }}
                  className={`w-full py-3 px-4 rounded-lg font-medium text-sm transition-all duration-300 ${
                    isDarkMode 
                      ? 'bg-red-600 hover:bg-red-700 text-white' 
                      : 'bg-red-500 hover:bg-red-600 text-white'
                  }`}
                >
                  Logout
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </nav>
  );
};

export default Navbar;

</File Content>
</Opened Files>
<Opened Files>
<File Name>
src/Components/ProtectedRoute.jsx
</File Name>
<File Content>
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

const ProtectedRoute = ({ children }) => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem('isLoggedIn');
      if (isLoggedIn !== 'true') {
        navigate('/login');
      } else {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, [navigate]);

  // Show loading while checking authentication
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

</File Content>
</Opened Files>
